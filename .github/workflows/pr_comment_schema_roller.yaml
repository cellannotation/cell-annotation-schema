# Triggered after the schema_roller.yaml
# Comments the schema files uploaded artifact link and schema documentation files to the related PR.
# This action is a separate action from schema_roller.yaml, because uploaded artifact ids (and the link) becomes available once the schema_roller.yaml action completed.
name: Comment Artifact URL on PR

on:
  workflow_run:
    types:
      - "completed"
    workflows:
      - "Schema Roller"

permissions: write-all

jobs:
  comment-on-pr:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:

      - name: Get Artifact URL & PR Info
        env:
          GITHUB_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          WORKFLOW_RUN_EVENT_OBJ: ${{ toJSON(github.event.workflow_run) }}
        run: |
          
          PREVIOUS_JOB_ID=$(jq -r '.id' <<< "$WORKFLOW_RUN_EVENT_OBJ")
          echo "Previous Job ID: $PREVIOUS_JOB_ID"
          echo "PREVIOUS_JOB_ID=$PREVIOUS_JOB_ID" >> "$GITHUB_ENV"
          
          ARTIFACT_URL=$(gh api "/repos/$OWNER/$REPO/actions/artifacts" \
            --jq ".artifacts.[] |
            select(.workflow_run.id==${PREVIOUS_JOB_ID}) |
            select(.expired==false) |
            .archive_download_url")
          
          echo "ARTIFACT URL: $ARTIFACT_URL"
          ARTIFACT_URLS="$(echo "$ARTIFACT_URL" | tr '\n' '@')"
          ARTIFACT_URL_1="$(echo "$ARTIFACT_URLS" | cut -d'@' -f1)"
          ARTIFACT_1_ID="$(echo "$ARTIFACT_URL_1" | cut -d'/' -f9)"
          ARTIFACT_URL_2="$(echo "$ARTIFACT_URLS" | cut -d'@' -f2)"
          ARTIFACT_2_ID="$(echo "$ARTIFACT_URL_2" | cut -d'/' -f9)"
          
          echo "ARTIFACT URL 1: $ARTIFACT_URL_1"
          echo "ARTIFACT_1_ID=$ARTIFACT_1_ID" >> "$GITHUB_ENV"
          echo "ARTIFACT URL 2: $ARTIFACT_URL_2"
          echo "ARTIFACT_2_ID=$ARTIFACT_2_ID" >> "$GITHUB_ENV"
          
          HEAD_SHA=$(jq -r '.pull_requests[0].head.sha' \
            <<< "$WORKFLOW_RUN_EVENT_OBJ")
          
          echo "Head sha: $HEAD_SHA"
          echo "HEAD_SHA=$HEAD_SHA" >> "$GITHUB_ENV"

      - name: Download workflow artifact
        uses: dawidd6/action-download-artifact@v2.11.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: schema_roller.yaml
          run_id: ${{ github.event.workflow_run.id }}
          if_no_artifact_found: warn

      - name: "Check file existence"
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "pr_num/pr_num.txt"

      - name: Set pr_num variable
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          PR_NUM=$(cat pr_num/pr_num.txt)
          echo "PR_NUM: $PR_NUM"
          echo "PR_NUM=$PR_NUM" >> "$GITHUB_ENV"

      - name: Set head_ref variable
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          HEAD_REF=$(cat head_ref/head_ref.txt)
          echo "HEAD_REF: $HEAD_REF"
          echo "HEAD_REF=$HEAD_REF" >> "$GITHUB_ENV"

      - name: Checkout
        if: steps.check_files.outputs.files_exists == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ env.HEAD_REF }}
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        if: steps.check_files.outputs.files_exists == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        if: steps.check_files.outputs.files_exists == 'true'
        run: pip install -r requirements.txt

      - name: Release assets generation
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          PYTHONPATH=./src:$PYTHONPATH python src/cas_schema/schema_manager.py

      - name: Schema documentation generation
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          PYTHONPATH=./src:$PYTHONPATH python src/cas_schema/schema_docs.py

      - name: Prepare download links comment
        if: steps.check_files.outputs.files_exists == 'true'
        run: "echo \"Rolled schema files: [schemas.zip](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ env.PREVIOUS_JOB_ID }}/artifacts/${{ env.ARTIFACT_1_ID }})\" >schema-comment.md"

      - name: Prepare BICAN schema doc comment
        if: steps.check_files.outputs.files_exists == 'true'
        run: "echo \"\n<details>\n <summary> BICAN schema documentation</summary> \n\" >> schema-comment.md; cat BICAN_schema.md >>schema-comment.md"

      - name: BICAN Schema Docs Comment
        if: steps.check_files.outputs.files_exists == 'true'
        env:
          JOB_PATH: "${{ github.server_url }}/${{ github.repository }}/actions/\
              runs/${{ env.PREVIOUS_JOB_ID }}"
          HEAD_SHA: ${{ env.HEAD_SHA }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ env.PR_NUM }}
          body-path: schema-comment.md

      - name: Prepare CAP schema doc comment
        if: steps.check_files.outputs.files_exists == 'true'
        run: "echo \"</details>\n\n<details>\n <summary> CAP schema documentation</summary> \n\" > schema-comment.md; cat CAP_schema.md >>schema-comment.md"

      - name: CAP Schema Docs Comment
        if: steps.check_files.outputs.files_exists == 'true'
        env:
          JOB_PATH: "${{ github.server_url }}/${{ github.repository }}/actions/\
              runs/${{ env.PREVIOUS_JOB_ID }}"
          HEAD_SHA: ${{ env.HEAD_SHA }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ env.PR_NUM }}
          body-path: schema-comment.md
